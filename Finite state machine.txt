library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity Finite_State_Machine is
    Port ( clk : in STD_LOGIC;
           reset : in STD_LOGIC;
           input : in STD_LOGIC;
           output : out STD_LOGIC);
end Finite_State_Machine;

architecture Behavioral of Finite_State_Machine is
    type state_type is (S0, S1, S2, S3);
    signal current_state, next_state : state_type;
begin
    process(clk, reset)
    begin
        if reset = '1' then
            current_state <= S0; -- Initialize to start state
        elsif rising_edge(clk) then
            current_state <= next_state; -- Update state based on next_state
        end if;
    end process;

    process(current_state, input)
    begin
        case current_state is
            when S0 =>
                if input = '1' then
                    next_state <= S1;
                else
                    next_state <= S0;
                end if;
            when S1 =>
                if input = '1' then
                    next_state <= S2;
                else
                    next_state <= S1;
                end if;
            when S2 =>
                if input = '1' then
                    next_state <= S3;
                else
                    next_state <= S2;
                end if;
            when S3 =>
                next_state <= S0;
            when others =>
                next_state <= S0;
        end case;
    end process;

    output <= '1' when current_state = S3 else '0'; -- Output '1' in state S3, '0' otherwise
end Behavioral;